// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/jonathanmoreiraa/planejja/internal/api/handler"
	"github.com/jonathanmoreiraa/planejja/internal/api/route"
	"github.com/jonathanmoreiraa/planejja/internal/config"
	"github.com/jonathanmoreiraa/planejja/internal/infra/database"
	"github.com/jonathanmoreiraa/planejja/internal/infra/repository"
	"github.com/jonathanmoreiraa/planejja/internal/usecase/revenue"
	"github.com/jonathanmoreiraa/planejja/internal/usecase/user"
)

// Injectors from wire.go:

func InitializeAPI(cfg config.Config) (*route.ServerHTTP, error) {
	databaseProvider, err := database.NewMySqlDatabase(cfg)
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepository(databaseProvider)
	userUseCase := user.NewUserUseCase(userRepository)
	userHandler := handler.NewUserHandler(userUseCase)
	revenueRepository := repository.NewRevenueRepository(databaseProvider)
	revenueUseCase := revenue.NewRevenueUseCase(revenueRepository)
	revenueHandler := handler.NewRevenueHandler(revenueUseCase)
	handlerGroup := NewHandlerGroup(userHandler, revenueHandler)
	serverHTTP := route.NewServerHTTP(handlerGroup)
	return serverHTTP, nil
}

// wire.go:

func NewHandlerGroup(userHandler *handler.UserHandler, revenueHandler *handler.RevenueHandler) route.HandlerGroup {
	return route.HandlerGroup{
		UserHandler:    userHandler,
		RevenueHandler: revenueHandler,
	}
}
